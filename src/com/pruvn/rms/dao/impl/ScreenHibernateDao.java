/*
 * Java bean class for entity table RM_SCREEN 
 * Created on 3 Oct 2013 ( Time 12:18:01 )
 * Generated by Telosys Tools Generator ( version 2.0.0 )
 */

package com.pruvn.rms.dao.impl;

import java.sql.SQLException;
import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;
import org.springframework.orm.hibernate3.HibernateCallback;

import com.pruvn.rms.dao.ScreenDao;
import com.pruvn.rms.domain.Record;
import com.pruvn.rms.domain.Screen;
import com.pruvn.rms.utils.SqlConstant;
import com.pruvn.rms.utils.Constant.ParameterApplication;


/**
 * Data Access Object implementation for table "RM_SCREEN"
 * 
 * @author Telosys Tools Generator
 *
 */
public class ScreenHibernateDao extends AbstractHibernateDAO<Screen, Integer> implements ScreenDao {

    
	/**
	 * Find RmScreen by code
	 */
	public List<Screen> findByStage(String stage) {
		return findByCriteria(Restrictions.eq("stage", stage));
	}
	
	/**
	 * Find RmScreen by name
	 */
	public List<Screen> findByname(String name) {
		return findByCriteria(Restrictions.eq("name", name));
	}	
	
	/**
	 * Find RmScreen by name
	 */
	public List<Screen> findAllActive() {
		return findByCriteria(Restrictions.eq("isActived", ParameterApplication.ACTIVE.getStatus()));
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public List<Screen> getListScreen(final String stage, final String system){
		//Find Screen by stage
		final List<Screen> list = this.findByStage(stage);
		
		return (List<Screen>) getHibernateTemplate().execute(new HibernateCallback() {
            public Object doInHibernate(final Session session) throws HibernateException, SQLException {
            	if(list != null && list.size() > 0){
            		Screen screen = list.get(0);
            		SQLQuery query = session.createSQLQuery(" SELECT * FROM RM_SCREEN" +
            				" WHERE PRIORITY1 > 0 and PRIORITY1 < :priority1 AND IS_ACTIVED  = 1 and SYSTEM = :system " +
            				" ORDER BY PRIORITY1");
            		query.setParameter("priority1",  screen.getPriority1());
            		query.setParameter("system",  system);
            		query.addEntity(Screen.class);
            		return (List<Screen>) query.list();
            	}
            	return null;
            	
            }
        });
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public List<Screen> getListScreen2(final String stage2, final String system){
		//Find Screen by stage
		final List<Screen> list = this.findByStage(stage2);
		
		return (List<Screen>) getHibernateTemplate().execute(new HibernateCallback() {
            public Object doInHibernate(final Session session) throws HibernateException, SQLException {
            	if(list != null && list.size() > 0){
            		Screen screen = list.get(0);
            		SQLQuery query = session.createSQLQuery(" SELECT * FROM RM_SCREEN" +
            				" WHERE PRIORITY2 >  0 and PRIORITY2 < :priority2 AND IS_ACTIVED  = 1 and SYSTEM = :system" +
            				" ORDER BY PRIORITY2");
            		query.setParameter("priority2",  screen.getPriority2());
            		query.setParameter("system",  system);
            		query.addEntity(Screen.class);
            		return (List<Screen>) query.list();
            	}
            	return null;
            	
            }
        });
	}
	
	
}