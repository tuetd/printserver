/*
 * Java bean class for entity table RM_TB6 
 * Created on 3 Oct 2013 ( Time 12:18:01 )
 * Generated by Telosys Tools Generator ( version 2.0.0 )
 */

package com.pruvn.rms.dao.impl;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;
import org.springframework.orm.hibernate3.HibernateCallback;

import com.pruvn.rms.dao.StoredLoanDao;
import com.pruvn.rms.domain.StoredLoan;
import com.pruvn.rms.model.FilterStoredLoanForm;
import com.pruvn.rms.utils.CommonUtils;
import com.pruvn.rms.utils.SqlConstant;


/**
 * Data Access Object implementation for table "RM_Foreclosure"
 * 
 * @author Telosys Tools Generator
 *
 */
public class StoredLoanHibernateDao extends AbstractHibernateDAO<StoredLoan, Integer> implements StoredLoanDao {


	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public List<StoredLoan> getForeclosureList(final FilterStoredLoanForm filterMRCForm) {
		// TODO Auto-generated method stub
		return getHibernateTemplate().execute(new HibernateCallback() {
            public Object doInHibernate(final Session session) throws HibernateException, SQLException {
            	if(StringUtils.isEmpty(filterMRCForm.getLoanNo()) && StringUtils.isEmpty(filterMRCForm.getBarCode())
            			&& StringUtils.isEmpty(filterMRCForm.getNameBox())) return new ArrayList<StoredLoan>();
            	
            	StringBuffer sqlQuery  = new StringBuffer(SqlConstant.SELECT_STOREDLOAN_LIST_ACL);
            	if(!CommonUtils.isNullOrEmpty(filterMRCForm.getLoanNo())) {            		
            		sqlQuery.append(" AND LOAN_NO like '%" + filterMRCForm.getLoanNo() + "%'");
            	}            	
            	if(!CommonUtils.isNullOrEmpty(filterMRCForm.getBarCode())) {            		
            		sqlQuery.append(" AND BARCODE like '%" + filterMRCForm.getBarCode() + "%'");
            	}
            	if(!CommonUtils.isNullOrEmpty(filterMRCForm.getNameBox())) {
            		sqlQuery.append(" AND NAME_BOX like '%" + filterMRCForm.getNameBox() + "%'");
            	}
        		SQLQuery query = session.createSQLQuery(
        				sqlQuery.toString());
        		//query.setParameter("username", username);
        		//query.setParameter("stage", stage);
        		query.addEntity(StoredLoan.class);
        		List<StoredLoan> result = query.list();
        		return result;
            }
        });
	}
	@Override
	public StoredLoan findByBarCodeAndNameBox(String barCode,String nameBox) {
		List<StoredLoan> list =  findByCriteria(Restrictions.eq("barCode", barCode),Restrictions.eq("nameBox", nameBox));		
		if(list != null && list.size() > 0){
			return list.get(0);
		}
		return null;
	}
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public int updateDestroyStoredLoan(final StoredLoan store,final String username) {
		return  getHibernateTemplate().execute(new HibernateCallback() {
            public Object doInHibernate(final Session session) throws HibernateException, SQLException {
            	String sql=null;
            	if(StringUtils.isNotEmpty(store.getDestroyDate()) && StringUtils.isNotEmpty(store.getRemark()) && StringUtils.isNotEmpty(store.getDateSent())){
            		sql = "update StoredLoan  set destroyDate = :destroyDate,remark = :remark,dateSent = :dateSent ,updateDate=sysdate,updateBy = :updateBy where barCode = :barCode and nameBox = :nameBox";
            		Query q = session.createQuery(sql);
            		q.setParameter("remark", store.getRemark());
            		q.setParameter("destroyDate", store.getDestroyDate());
            		q.setParameter("barCode",store.getBarCode());
            		q.setParameter("dateSent",store.getDateSent());
            		q.setParameter("nameBox",store.getNameBox());
            		q.setParameter("updateBy", username);
            		return q.executeUpdate();
            	}else{
            		if(StringUtils.isNotEmpty(store.getDestroyDate())){
            			sql = "update StoredLoan  set destroyDate = :destroyDate,updateDate=sysdate,updateBy = :updateBy where barCode = :barCode and nameBox = :nameBox";
            			Query q = session.createQuery(sql);
            			q.setParameter("destroyDate", store.getDestroyDate());
                		q.setParameter("barCode",store.getBarCode());
                		q.setParameter("nameBox",store.getNameBox());
                		q.setParameter("updateBy", username);
            			return q.executeUpdate();
                	}else if(StringUtils.isNotEmpty(store.getRemark())){
                		sql = "update StoredLoan  set remark = :remark,updateDate=sysdate,updateBy = :updateBy where barCode = :barCode and nameBox = :nameBox";
                		Query q = session.createQuery(sql);
                		q.setParameter("remark", store.getRemark());
                		q.setParameter("barCode",store.getBarCode());
                		q.setParameter("nameBox",store.getNameBox());
                		q.setParameter("updateBy", username);
                		return q.executeUpdate();
                	}else if(StringUtils.isNotEmpty(store.getDateSent())){
                		sql = "update StoredLoan  set dateSent = :dateSent,updateDate=sysdate,updateBy = :updateBy where barCode = :barCode and nameBox = :nameBox";
                		Query q = session.createQuery(sql);
                		q.setParameter("dateSent", store.getDateSent());
                		q.setParameter("barCode",store.getBarCode());
                		q.setParameter("nameBox",store.getNameBox());
                		q.setParameter("updateBy", username);
                		return q.executeUpdate();
                	}	
            	}
				return 0;
            }
        });
		
		
	}
}