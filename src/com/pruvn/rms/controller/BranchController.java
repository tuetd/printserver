/*
 * Java bean class for entity table RM_BRANCH 
 * Created on 3 Oct 2013 ( Time 12:18:01 )
 * Generated by Telosys Tools Generator ( version 2.0.0 )
 */

package com.pruvn.rms.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.pruvn.rms.domain.Branch;
import com.pruvn.rms.model.BranchForm;
import com.pruvn.rms.service.BranchService;
import com.pruvn.rms.utils.CommonUtils;
import com.pruvn.rms.utils.Constant.ParameterApplication;

/**
 * Controller implementation for table "RM_BRANCH"
 * 
 * @author Telosys Tools Generator
 * 
 */

@Controller
public class BranchController {
	private static final Logger logger = Logger
			.getLogger(BranchController.class);

	private BranchService branchService;

	/**
	 * @return the BranchService
	 */
	public BranchService getBranchService() {
		return branchService;
	}

	/**
	 * @param BranchService
	 *            the BranchService to set
	 */
	@Autowired
	public void setBranchService(BranchService branchService) {
		this.branchService = branchService;
	}

	@RequestMapping(value = "/admin/branchlist", method = RequestMethod.GET)
	public String branchlist(Model model, HttpServletRequest request,
			HttpServletResponse response) {
		logger.debug("reach branchController#userlist...");
		List<Branch> list = branchService.findAll();
		model.addAttribute("branchList", list);
		return "branchlist";
	}

	@RequestMapping(value = "/admin/branchmod", method = RequestMethod.GET)
	public String createbranch(Model model, HttpServletRequest request,
			HttpServletResponse response) {
		logger.debug("reach branchController#createbranch...");
		BranchForm form = new BranchForm();
		String branchid = request.getParameter("id");
		if (StringUtils.isNotEmpty(branchid)
				&& CommonUtils.isNumeric(branchid.trim())) {
			// Get user and popular this user to form
			Branch branch = branchService.getById(new Integer(branchid));
			if (branch != null) {
				form.setId(branch.getId());
				form.setCode(branch.getCode());
				form.setName(branch.getName());
				form.setIsActived(branch.getIsActived() != null && branch.getIsActived() == ParameterApplication.ACTIVE.getStatus());
			}
		}
		model.addAttribute(form);
		return "branchmod";
	}

	@RequestMapping(value = "/admin/branchmod", method = RequestMethod.POST)
	public String createbranchSubmit(@Valid BranchForm form,
			BindingResult result, Model model, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		logger.debug("reach branchController#createbranchSubmit...");
		Branch branch = null;

		if (StringUtils.isEmpty(form.getCode())) {
			result.reject("branch.emptyrequirefields",
					"Please input required field !");
			model.addAttribute(form);
			return "branchmod";
		}

		if (form.getId() != null && form.getId() > 0) {
			branch = branchService.getById(form.getId());
		} else {
			branch = branchService.findBycode(form.getCode());

			if (branch != null) {
				result.reject("branch.notexisted",
						"branch " + form.getCode() + " existed !");
				model.addAttribute(form);
				return "branchmod";
			}
		}

		if (branch == null) {
			branch = new Branch();
		}

		branch.setId(form.getId());
		branch.setCode(form.getCode());
		branch.setName(form.getName());
		branch.setIsActived(form.getIsActived() ? ParameterApplication.ACTIVE.getStatus() : ParameterApplication.NOACTIVE.getStatus());
		branchService.saveOrUpdate(branch);

		return "redirect:/admin/branchlist.html";
	}

	@RequestMapping(value = "/admin/branchdel", method = RequestMethod.GET)
	public String branchdel(Model model, HttpServletRequest request,
			HttpServletResponse response) {
		logger.debug("reach branchController#branchdel...");
		String branchid = request.getParameter("id");
		if (StringUtils.isNotEmpty(branchid)
				&& CommonUtils.isNumeric(branchid.trim())) {
			// Get branch and popular this user to form
			Branch branch = branchService.getById(new Integer(branchid));
			if (branch != null) {
				branch.setIsActived(ParameterApplication.NOACTIVE.getStatus());
				branchService.saveOrUpdate(branch);
			}
		}
		return "redirect:/admin/branchlist.html";
	}
}