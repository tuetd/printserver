package com.pruvn.rms.controller;

import java.security.NoSuchAlgorithmException;
import java.util.Calendar;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.pruvn.rms.common.Constants;
import com.pruvn.rms.domain.UserLog;
import com.pruvn.rms.domain.UserM;
import com.pruvn.rms.model.ResetPwdForm;
import com.pruvn.rms.service.UserLogService;
import com.pruvn.rms.service.UserMService;
import com.pruvn.rms.service.exceptions.UserException;
import com.pruvn.rms.utils.Constant;
import com.pruvn.rms.utils.MD5;
import com.pruvn.rms.utils.MailUtil;
import com.pruvn.rms.utils.PasswordUtil;
import com.pruvn.rms.utils.Constant.ACTIONS;
import com.pruvn.rms.utils.Constant.LOG_STATUS;
import com.pruvn.rms.utils.Constant.LOG_TYPE;


@Controller
@RequestMapping(value = "/auth/resetpwd")
public class ResetPwdController
{
	private static final Logger logger = Logger.getLogger(ResetPwdController.class);
	private UserMService userMService;
	private UserLogService userLogService;
	
	public UserLogService getUserLogService() {
		return userLogService;
	}
	@Autowired
	public void setUserLogService(UserLogService userLogService) {
		this.userLogService = userLogService;
	}
	/**
	 * @return the userMService
	 */
	public UserMService getUserMService() {
		return userMService;
	}

	/**
	 * @param userMService the userMService to set
	 */
	@Autowired
	public void setUserMService(UserMService userMService) {
		this.userMService = userMService;
	}

	@RequestMapping(method = RequestMethod.GET)
	public String getResetPwdForm(Model model)
	{
		logger.debug("reach ResetPwdController$getResetPwdForm...");
		model.addAttribute(new ResetPwdForm());
		return "resetpwd";
	}

	@RequestMapping(method = RequestMethod.POST)
	public String resetPwd(@Valid ResetPwdForm resetPwdForm, BindingResult result, Model model, HttpServletRequest request,
			HttpServletResponse response)
	{
		try {
			logger.debug("reach ResetPwdController$resetPwd...");
			
			if (result.hasErrors())
			{
				return "resetpwd";
			}
			
			if (StringUtils.isEmpty(resetPwdForm.getEmail())) {
				result.reject("common.form.resetpwd.checkinput", "Please check your input !");
				return "resetpwd";
			}
			
			UserM user = userMService.getUserByUserName(resetPwdForm.getUsername());
			
			if (user == null) {
				result.reject("common.form.resetpwd.invalidUserName", "Invalid username. Please check your input !");
				return "resetpwd";
			}
			
			//Email to user new password
			if (MailUtil.isValidEmailAddress(resetPwdForm.getEmail())) {

				String email = resetPwdForm.getEmail();
				String username = resetPwdForm.getUsername();
				String pnewPwd = PasswordUtil.getRandomString(10);
				String newPwd = MD5.encode(pnewPwd);//Encode new pw before save
				if (StringUtils.isNotEmpty(email)) {
					user = userMService.findUser(email, username);
					
					if (user != null && StringUtils.isNotEmpty(user.getUsername())) {
						String oldPwd = user.getPassword();
						user.setPassword(newPwd);
						user.setIsActived(1);
						user.setLastModifiedDate(Calendar.getInstance().getTime());
						user.setLastModifiedBy(SecurityContextHolder.getContext()
								.getAuthentication().getName());
						userMService.saveOrUpdate(user);
						
						//Save user log 
						UserLog userlog= new UserLog();
				    	userlog.setLogDate(new Date());
				    	userlog.setUsername(user.getUsername());    	
				    	userlog.setRemoteIP(request.getRemoteAddr());
				    	userlog.setSession(request.getSession().getId());    	
				    	userlog.setLogType(LOG_TYPE.AUTHENTICATION.toString());
				    	userlog.setActivity(ACTIONS.RESET_PASSWORD.toString());
				    	userlog.setInput("Username is : " + user.getUsername());
				    	userlog.setOutput(Constants.SUCCESS_RESET_PW);
				    	userlog.setStatus(LOG_STATUS.SUCCESS.toString());
				    	userlog.setNoidung("User reseted password.");
				    	userlog.setStatusNote("old pw:" + oldPwd + "; new pw: " + newPwd);
				    	userLogService.save(userlog);
						
						MailUtil.sendMail(resetPwdForm.getEmail(), String.format(Constant.RESET_PWD_CONTENT, user.getFullname(), user.getUsername(), pnewPwd) + Constant.AUTOGENERATED_EMAIL_CONTENT, Constant.RESET_MAIL_HEADER);
						
						result.reject("common.form.resetpwd.sucessfully", "Please check your mailbox to get new password");
					} else {
						result.reject("common.form.resetpwd.email.incorrect", "Invalid email. Please correct your email format !");
					}
				}			
			}else {
				result.reject("common.form.resetpwd.email.incorrect", "Invalid email. Please correct your email format !");
			}
		} catch (UserException e) {
			logger.error(e.getStackTrace());
			result.reject("common.form.resetpwd.email.notexisted", e.getMessage());
		} catch (NoSuchAlgorithmException e) {
			result.reject("operation.failure.message", e.getMessage());
			logger.error(e.getStackTrace());
			return "changepwd";
		}
		
		return "resetpwd";
	}
}


