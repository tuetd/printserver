/*
 * Java bean class for entity table RM_PRODUCT 
 * Created on 3 Oct 2013 ( Time 12:18:07 )
 * Generated by Telosys Tools Generator ( version 2.0.0 )
 */

package com.pruvn.rms.service.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;

import com.pruvn.rms.dao.BranchDao;
import com.pruvn.rms.dao.ProductDao;
import com.pruvn.rms.domain.Branch;
import com.pruvn.rms.domain.Product;
import com.pruvn.rms.service.ProductService;
import com.pruvn.rms.service.abstracts.GenericServiceImpl;

/**
 * Service implementation for table "RM_PRODUCT"
 * 
 * @author Telosys Tools Generator
 *
 */


@Service("rmProductService")
public class ProductServiceImpl extends GenericServiceImpl<ProductDao, Product,Integer>  implements ProductService
{
	private static final Logger logger = Logger.getLogger(ProductServiceImpl.class);
	
	private BranchDao branchDao;
	
	
	public BranchDao getBranchDao() {
		return branchDao;
	}

	public void setBranchDao(BranchDao branchDao) {
		this.branchDao = branchDao;
	}

	/**
	 * Find RmProduct by code
	 */
	@Override
	public Product findByCode(String code) {
		/*logger.debug("Begin executing findBycode method...");
		List<Product> lstRet = new ArrayList<Product>();
		List<Product> bos = dao.findBycode(code);
		for (Product item : bos) {
			lstRet.add(mapper.map(item, Product.class));
		}
		
		logger.debug("End executing findBycode method, returning value...");
		return lstRet;*/
		//return dao.findBycode(code);
		List<Product> list = dao.findByCode(code);
		return list != null && list.size() > 0 ? list.get(0) : null;
	}
	
	/**
	 * Find RmProduct by name
	 */
	@Override
	public List<Product> findByName(String name) {
		/*logger.debug("Begin executing findByname method...");
		List<Product> lstRet = new ArrayList<Product>();
		List<Product> bos = dao.findByname(name);
		for (Product item : bos) {
			lstRet.add(mapper.map(item, Product.class));
		}
		
		logger.debug("End executing findByname method, returning value...");
		return lstRet;*/
		return dao.findByName(name);
	}
	
	/**
	 * Find RmProduct by description
	 */
	@Override
	public List<Product> findByDescription(String description) {
		/*logger.debug("Begin executing findBydescription method...");
		List<Product> lstRet = new ArrayList<Product>();
		List<Product> bos = dao.findBydescription(description);
		for (Product item : bos) {
			lstRet.add(mapper.map(item, Product.class));
		}
		
		logger.debug("End executing findBydescription method, returning value...");
		return lstRet;*/
		return dao.findByDescription(description);
	}
	
	/**
	 * Find RmProduct by branchId
	 */
	@Override
	public List<Product> findByBranchId(Integer branchId) {
		/*logger.debug("Begin executing findBybranchId method...");
		List<Product> lstRet = new ArrayList<Product>();
		List<Product> bos = dao.findBybranchId(branchId);
		for (Product item : bos) {
			lstRet.add(mapper.map(item, Product.class));
		}
		
		logger.debug("End executing findBybranchId method, returning value...");
		return lstRet;*/
		return dao.findByBranchId(branchId);
	}
	@Override
	public List<Branch> getAllActiveBranchs() {
		return branchDao.findAllActive();
	}
	
}