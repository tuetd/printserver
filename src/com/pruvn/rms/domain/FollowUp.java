/*
 * Java bean class for entity table RM_FOLLOW_UP 
 * Created on 30 Sep 2013 ( Time 13:55:17 )
 * Generated by Telosys Tools Generator ( version 2.0.0 )
 */

package com.pruvn.rms.domain;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * Domain/Entity bean for table "RM_FOLLOW_UP"
 * 
 * @author Telosys Tools Generator
 *
 */
@Entity 
@Cache(usage=CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
@Table(name="RM_FOLLOW_UP")
public class FollowUp implements Serializable
{
    private static final long serialVersionUID = 1L;

	@Id
	@GenericGenerator(name = "generator", strategy = "sequence-identity", parameters = @Parameter(name = "sequence", value = "RM_FOLLOW_UP_SEQ"))
    @GeneratedValue(generator = "generator")
	@Column(name="ID")
    private int id           ; // Primary Key

	@Column(name="RECORD_ID")
    private int recordId     ;
	
	@Column(name="CREATE_DATE")
	@Temporal(TemporalType.TIMESTAMP)
    private Date       createDate   ;
	
	@Column(name="CREATER")
    private String     creater      ;
	
	@Column(name="UPDATE_DATE")
	@Temporal(TemporalType.TIMESTAMP)
    private Date       updateDate   ;
	
	@Column(name="UPDATER")
    private String     updater      ;
	
	@Column(name="CATEGORY")
    private String     category     ;
	
	@Column(name="DESCRIPTION")
    private String     description  ;
	
	@Column(name="STATUS")
    private String     status       ;
    
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
    /**
     * Set the "id" field value
     * This field is mapped on the database column "ID" ( type "NUMBER", NotNull : true ) 
     * @param id
     */
	public void setId( int id )
    {
        this.id = id ;
    }
    /**
     * Get the "id" field value
     * This field is mapped on the database column "ID" ( type "NUMBER", NotNull : true ) 
     * @return the field value
     */
	public int getId()
    {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : RECORD_ID ( NUMBER ) 
    /**
     * Set the "recordId" field value
     * This field is mapped on the database column "RECORD_ID" ( type "NUMBER", NotNull : true ) 
     * @param recordId
     */
    public void setRecordId( int recordId )
    {
        this.recordId = recordId;
    }
    /**
     * Get the "recordId" field value
     * This field is mapped on the database column "RECORD_ID" ( type "NUMBER", NotNull : true ) 
     * @return the field value
     */
    public int getRecordId()
    {
        return this.recordId;
    }

    //--- DATABASE MAPPING : CREATE_DATE ( DATE ) 
    /**
     * Set the "createDate" field value
     * This field is mapped on the database column "CREATE_DATE" ( type "DATE", NotNull : false ) 
     * @param createDate
     */
    public void setCreateDate( Date createDate )
    {
        this.createDate = createDate;
    }
    /**
     * Get the "createDate" field value
     * This field is mapped on the database column "CREATE_DATE" ( type "DATE", NotNull : false ) 
     * @return the field value
     */
    public Date getCreateDate()
    {
        return this.createDate;
    }

    //--- DATABASE MAPPING : CREATER ( VARCHAR2 ) 
    /**
     * Set the "creater" field value
     * This field is mapped on the database column "CREATER" ( type "VARCHAR2", NotNull : false ) 
     * @param creater
     */
    public void setCreater( String creater )
    {
        this.creater = creater;
    }
    /**
     * Get the "creater" field value
     * This field is mapped on the database column "CREATER" ( type "VARCHAR2", NotNull : false ) 
     * @return the field value
     */
    public String getCreater()
    {
        return this.creater;
    }

    //--- DATABASE MAPPING : UPDATE_DATE ( DATE ) 
    /**
     * Set the "updateDate" field value
     * This field is mapped on the database column "UPDATE_DATE" ( type "DATE", NotNull : false ) 
     * @param updateDate
     */
    public void setUpdateDate( Date updateDate )
    {
        this.updateDate = updateDate;
    }
    /**
     * Get the "updateDate" field value
     * This field is mapped on the database column "UPDATE_DATE" ( type "DATE", NotNull : false ) 
     * @return the field value
     */
    public Date getUpdateDate()
    {
        return this.updateDate;
    }

    //--- DATABASE MAPPING : UPDATER ( VARCHAR2 ) 
    /**
     * Set the "updater" field value
     * This field is mapped on the database column "UPDATER" ( type "VARCHAR2", NotNull : false ) 
     * @param updater
     */
    public void setUpdater( String updater )
    {
        this.updater = updater;
    }
    /**
     * Get the "updater" field value
     * This field is mapped on the database column "UPDATER" ( type "VARCHAR2", NotNull : false ) 
     * @return the field value
     */
    public String getUpdater()
    {
        return this.updater;
    }

    //--- DATABASE MAPPING : CATEGORY ( VARCHAR2 ) 
    /**
     * Set the "category" field value
     * This field is mapped on the database column "CATEGORY" ( type "VARCHAR2", NotNull : false ) 
     * @param category
     */
    public void setCategory( String category )
    {
        this.category = category;
    }
    /**
     * Get the "category" field value
     * This field is mapped on the database column "CATEGORY" ( type "VARCHAR2", NotNull : false ) 
     * @return the field value
     */
    public String getCategory()
    {
        return this.category;
    }

    //--- DATABASE MAPPING : DESCRIPTION ( VARCHAR2 ) 
    /**
     * Set the "description" field value
     * This field is mapped on the database column "DESCRIPTION" ( type "VARCHAR2", NotNull : false ) 
     * @param description
     */
    public void setDescription( String description )
    {
        this.description = description;
    }
    /**
     * Get the "description" field value
     * This field is mapped on the database column "DESCRIPTION" ( type "VARCHAR2", NotNull : false ) 
     * @return the field value
     */
    public String getDescription()
    {
        return this.description;
    }

    //--- DATABASE MAPPING : STATUS ( VARCHAR2 ) 
    /**
     * Set the "status" field value
     * This field is mapped on the database column "STATUS" ( type "VARCHAR2", NotNull : false ) 
     * @param status
     */
    public void setStatus( String status )
    {
        this.status = status;
    }
    /**
     * Get the "status" field value
     * This field is mapped on the database column "STATUS" ( type "VARCHAR2", NotNull : false ) 
     * @return the field value
     */
    public String getStatus()
    {
        return this.status;
    }

    

    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString()
    {
        StringBuffer sb = new StringBuffer(); 
        sb.append(id); 
        sb.append("|"); 
        sb.append(recordId); 
        sb.append( "|" ); 
        sb.append(createDate); 
        sb.append( "|" ); 
        sb.append(creater); 
        sb.append( "|" ); 
        sb.append(updateDate); 
        sb.append( "|" ); 
        sb.append(updater); 
        sb.append( "|" ); 
        sb.append(category); 
        sb.append( "|" ); 
        sb.append(description); 
        sb.append( "|" ); 
        sb.append(status); 
        return sb.toString();
    }

}
