/*
 * Java bean class for entity table ${beanClass.sqlTable} 
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */

package ${target.javaPackageFromFolder($project.srcFolder)};

import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.LockMode;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Example;
import org.hibernate.criterion.Restrictions;
import org.springframework.orm.hibernate3.HibernateCallback;
import org.springframework.orm.hibernate3.HibernateTemplate;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import ${BASE_PKG}.dao.abstracts.GenericDao;

/**
 * Abstract Hibernate Dao implementation
 * 
 * @author Telosys Tools Generator
 *
 */
public abstract class GenericHibernateDao<T, ID extends Serializable> extends HibernateDaoSupport implements GenericDao<T, ID> {

	private Class<T> persistentClass;

	public GenericHibernateDao()  {
		this.persistentClass = (Class<T>) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0];
	}
	
	public void initDao() throws Exception {
		super.initDao();
        getHibernateTemplate().setFlushMode(HibernateTemplate.FLUSH_COMMIT);
	}

	public Class<T> getPersistentClass() {
        return persistentClass;
    }

	public T getById(ID id) {
		return (T) getHibernateTemplate().get(getPersistentClass(), id);
	}

	public T getById(ID id, boolean lock) {
		if (lock) {
			return (T) getHibernateTemplate().get(getPersistentClass(), id, LockMode.UPGRADE);
		} else
			return getById(id);
	}

	public T loadById(ID id) {
		return (T) getHibernateTemplate().load(getPersistentClass(), id);
	}

	public void save(T entity) {
		getHibernateTemplate().save(entity);
	}

	public void update(T entity) {
		getHibernateTemplate().update(entity);
	}

	public void saveOrUpdate(T entity) {
		getHibernateTemplate().saveOrUpdate(entity);
	}

	public void delete(T entity) {
		getHibernateTemplate().delete(entity);
	}

	public void deleteById(ID id) 	{
		getHibernateTemplate().delete(loadById(id));
	}

	@SuppressWarnings("unchecked")
    public List<T> findAll() {
        return findByCriteria();
    }
	
	/**
     * Use this inside subclasses as a convenience method.
     */
    @SuppressWarnings("unchecked")
    protected List<T> findByCriteria(final Criterion... criterion) {
    	return getHibernateTemplate().execute(new HibernateCallback() {
            public Object doInHibernate(Session session) throws HibernateException, SQLException {
            	Criteria crit = session.createCriteria(getPersistentClass());
            	for (Criterion c : criterion) {
                    crit.add(c);
                }
                return crit.list();
            }
        });
   }
   
   	/**
 	 * Find by criteria.
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public List<T> findByCriteria(final Map criterias) {
		return getHibernateTemplate().execute(new HibernateCallback() {
            public Object doInHibernate(Session session) throws HibernateException, SQLException {
            	Criteria criteria = session.createCriteria(getPersistentClass());
            	criteria.add(Restrictions.allEq(criterias));
                return criteria.list();
            }
        });
	}
	
	/**
	 * This method will execute an HQL query and return the number of affected entities.
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	protected List<T> executeQuery(final String query, final String namedParams[],	final Object params[]) {
		return getHibernateTemplate().execute(new HibernateCallback() {
            public List<T> doInHibernate(Session session) throws HibernateException, SQLException {
            	Query q = session.createQuery(query);
                if (namedParams != null) {
        			for (int i = 0; i < namedParams.length; i++) {
        				q.setParameter(namedParams[i], params[i]);
        			}
        		}
                return (List<T>) q.list();
            }
        });
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	protected int executeUpdateQuery(final String query, final String namedParams[],	final Object params[]) {
		return getHibernateTemplate().execute(new HibernateCallback() {
            public Object doInHibernate(Session session) throws HibernateException, SQLException {
            	Query q = session.createQuery(query);
                if (namedParams != null) {
        			for (int i = 0; i < namedParams.length; i++) {
        				q.setParameter(namedParams[i], params[i]);
        			}
        		}
                return q.executeUpdate();
            }
        });
	}
	
	protected int executeUpdateQuery(String query) {
		return executeUpdateQuery(query, null, null);
	}
	
	/**
	 * This method will execute a Named HQL query and return the number of affected entities.
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	protected int executeNamedQuery(final String namedQuery, final String namedParams[],	final Object params[]) {
		return getHibernateTemplate().execute(new HibernateCallback() {
            public Object doInHibernate(Session session) throws HibernateException, SQLException {
            	Query q = session.getNamedQuery(namedQuery);
            	if (namedParams != null) {
        			for (int i = 0; i < namedParams.length; i++) {
        				q.setParameter(namedParams[i], params[i]);
        			}
        		}
            	return q.executeUpdate();
            }
        });
	}
	
	protected int executeNamedQuery(String namedQuery) {
		return executeNamedQuery(namedQuery, null, null);
	}
	
	@SuppressWarnings("unchecked")
    public List<T> findByExample(final T exampleInstance, final String[] excludeProperty) {
		return getHibernateTemplate().execute(new HibernateCallback() {
            public Object doInHibernate(Session session) throws HibernateException, SQLException {
            	Criteria crit = session.createCriteria(getPersistentClass());
            	Example example =  Example.create(exampleInstance).excludeZeroes().enableLike().ignoreCase();
                for (String exclude : excludeProperty) {
                    example.excludeProperty(exclude);
                }
                crit.add(example);
                return crit.list();
            }
        });
    }}

