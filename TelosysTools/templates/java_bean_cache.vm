## ----------------------------------------------------------------------
## Macros 
## ----------------------------------------------------------------------
#macro( argumentsWithType $fields )
#set ( $count = 0 )
#set ( $args = "" )
#foreach( $field in $fields )
#set ( $count = $count + 1 )
#if ( $count > 1 )
#set ( $args = "$args, " )
#end
#set ( $args = "${args}${field.type} ${field.name}" )
#end
$args #end
## ----------------------------------------------------------------------
#macro( arguments $fields )
#set ( $count = 0 )
#set ( $args = "" )
#foreach( $field in $fields )
#set ( $count = $count + 1 )
#if ( $count > 1 )
#set ( $args = "${args}, " )
#end
#set ( $args = "${args} ${field.name}" )
#end
$args #end
## ----------------------------------------------------------------------
#macro( argumentsWithGetters $objName $fields )
#set ( $count = 0 )
#set ( $args = "" )
#foreach( $field in $fields )
#set ( $count = $count + 1 )
#if ( $count > 1 )
#set ( $args = "${args}, " )
#end
#set ( $args = "${args} ${objName}.${field.getter}()" )
#end
$args #end
## ----------------------------------------------------------------------
/*
 * Standard header
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */

package ${target.javaPackageFromFolder($project.srcFolder)};

import java.util.Hashtable;
import java.util.Map;

import $beanClass.fullName ;
#foreach( $import in $beanClass.imports )
import $import;
#end

/**
 * Very basic cache for ${beanClass.name} instances (just for the Telosys Tools demo)
 * 
 * @author Telosys Tools Generator
 *
 */
public class ${beanClass.name}Cache
{
	private final static Map<String,${beanClass.name}> cache = new Hashtable<String,${beanClass.name}>() ;
	
#set ( $keyFields = $beanClass.keyAttributes )
	/**
	 * Build the cache key from the Primary Key field(s)
#foreach( $field in $keyFields ) 
     * @param ${field.name} 
#end	 
	 * @return the key
	 */
	private final static String getKey( #argumentsWithType($keyFields) ) {
		return "" #foreach( $field in $keyFields ) + ${field.name} #end ;
	}

	/**
	 * Put the given ${beanClass.name} instance in the cache
	 * @param ${beanClass.name} instance to be stored
	 */
#set ( $paramName = ${beanClass.name.toLowerCase()} )
	public final static void put${beanClass.name}(${beanClass.name} ${paramName} ) {
		String key = getKey( #argumentsWithGetters( ${paramName}, $keyFields) ) ;
		cache.put(key, ${beanClass.name.toLowerCase()} );
	}
	
	/**
	 * Get the ${beanClass.name} instance for the given primary key
#foreach( $field in $keyFields ) 
     * @param ${field.name} 
#end	 
	 * @return the ${beanClass.name} instance (or null if none)
	 */
	public final static ${beanClass.name} get${beanClass.name}( #argumentsWithType($keyFields) ) {
		String key = getKey( #arguments($keyFields) ) ;
		return cache.get(key);
	}

	/**
	 * Removes the ${beanClass.name} associated with the given primary key
#foreach( $field in $keyFields ) 
     * @param ${field.name} 
#end	 
	 */
	public final static void remove${beanClass.name} ( #argumentsWithType($keyFields) ) {
		String key = getKey( #arguments($keyFields) ) ;
		cache.remove(key);
	}
	
	/**
	 * Removes the given ${beanClass.name} from the cache using its primary key
	 * @param ${beanClass.name} instance to be removed
	 */
#set ( $paramName = ${beanClass.name.toLowerCase()} )
	public final static void remove${beanClass.name} (${beanClass.name} ${paramName} ) { 
		String key = getKey( #argumentsWithGetters( ${paramName}, $keyFields) ) ;
		cache.remove(key);
	}

}
